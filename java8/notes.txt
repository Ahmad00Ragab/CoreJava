Build process of .java file:
.java -compiler-> .class -interpreter-> .exe

what is the difference between JDK, JRE?
JDK is the overall or the whole develepment kit, JRE is a part of the JDK.
JDK : JRE + other develepment tools like javac(compiler), debugger and other things
JRE : JVM + core libraries and and other components used to run the software 

What does the JVM include?
interpreter  : interpret the .class file to native code of the hosting machine
class loader : loads the .class file into memory 
JIT compiler : helps in the interpreter in its job by compiling the bytecode (.class) into native code to deliver it to the interpreter


what is the difference between compareTo(), equals() and == ?
1. compareTo() : used to sort objects in collections, exists in Comparable interface and return interface  ==> int compareTo(T o)
2. equals()    : used to check the logical equality of the objects, the objects contains the same data, exists in 'Object' super class 
3. ==          : used to check if the ref variables of two objects are the same or not (existed in the same place in memory)

Key Differences:
compareTo(): Compares order.
equals(): Compares content or logical equality.
==: Compares reference identity (whether two references point to the same object in memory).

what are primitive data types in java?
1.  byte (1 byte): default ==> 0
2.  char (2 byte): default ==> '\0'
3.  short (2 byte): default ==> 0
4.  int (4 byte): default ==> 0
5.  long (8 byte):default ==> 0
7.  float (4 byte): default ==> 0.0
8.  double (8 byte):default ==> 0.0
9.  boolean ( unkown):default ==> false
10. String : null ==> special literal that is assigned to any ref variables

(switch Case)
Notes on the case clause:
Each case must contain a constant expression (like a literal or an enum value).
The values provided in each case must be unique within that switch statement.
The break statement is optional, but without it, execution continues into the next case, which is called fall-through behavior. This can sometimes be useful but often leads to bugs if not intended.

important note: static initializer is loaded into memory by the JVM before calling the main method

what is Functional interface?
it is an interface that contains only one abstract method, and it defines the target types
of the lamda expression and method reference.

What is the direction of widening?
char --> short--> int --> long--> float --> double

can we use a normal local variable (not final) without initializaion?
no, the local variable must be initialized before using it in order not to give a compilation error.


can i use 'var' keyword with class members fields?
no, it is used only with local variables inside the method.


what is the sequence of executing the class members?
1. static initializers & static fields (Whatever comes first)
2. calling the main method
3. non-static initializers & instance fields (Whatever comes first)
4. constructor

/* =============== Collections ============== */
what is a collection?
it is a single entity that repersents a group of objects 

what are the problems that we faced in arrays that motivated us to use collections?
1. fixed size (not growable in runtime)
2. doesn't use underlying data structure so, no ready-made methods to work on it 
3. contains homogenous data 

what are the main interfaces that we have in the  Java Collection Framework(JCF)?
1. Collection (root interface for all collections interfaces except Map interface)
2. List
3. Set 
4. Queue
5. Map

what is the characterstics of List?
- List extends the Collection interface
- insertion order is preserved
- duplicates allowed 

what are the classes that implemented the 'List' interface?
1. ArrayList
2. Vector --> Stack
3. LinkedList


what is the characterstics of Set?
- Set extends the Collection interface
- insertion order is not preserved
- duplicates not allowed 

what are the classes that implemented the 'Set' interface?
1. HashSet
2. LinkedHashSet


what is the characterstics of Queue?
- Queue extends the Collection interface
- insertion order is preserved in some implementations like (LinkedList,ArrayDeque,ConcurrentLinkedQueue) and not allow in other implementations like (PriorityQueue) 
- duplicates allowed 

what are the classes that implemented the 'Queue' interface?
1. PriorityQueue   
2. LinkedList


what are the characterstics of 'Map' interface?
 - saves the data in the form of {key : value} 
 - each key is an object and each value is an object 
 - key is not allowed to be duplicated 
 - value is allowed to be duplicated


what are the implementations of the 'Map' interface?
1. HashMap
2. HashTable
3. LinkedHashMap
 



what are the methods that exists in Collection interface that is inherited to the childs?
Collection col; // this is not permitted but for example:
1. col.add(Object o)
2. col.addAll(Collection c)
3. col.remove(Object)
4. col.removeAll(Collection)
5. col.retainAll(Collection) ==> remove all the objects inside the Collection except the incoming 
6. col.clear()
7. col.isEmpty()
8. col.size()
9. col.contains()
10. col.containsAll()
11. col.toArray() ==> returns Group of objects


can a class extend interface?
no, class implement the interface only, but an interface can extend an interface.

what are the methods that are in the lise interface other than those inherited from the Collection interface?
List list;
1. list.get(index)
2. list.set(index, newObject) ==> replace the object at index with the newObject


what are the methods that the ArrayList class added?
1. addFirst(Object)
2. addLast(Object) 
3. removeFirst()
4. removeLast()
5. getFirst()
6. getLast()

what is the difference between the following declaraionts:
1. ArrayList al = new ArrayList(); ==> stores any kind of objects (hetergenous Data) 
2. ArrayList<String> al = new ArrayList<>(); ==> stores only Strings ==> (homogenous Data)


which is better in performance ArrayList or LinkedList?
- ArrayList is better when there is a lot of retreival  (al.get()) 
- LinkedList is better when there is a logt of insertion (ls.set())

For the implementations of the 'Set' interface : HashSet and LinkedHashSet ==> inertion order is not preserved
so what is the mechanism that it uses in insertion?
- it uses the mechanism of HashCode 

what is the advantage of HashSet?
Search operations in it is Fast because of using the concept of HashCode.









Refs Links :

Collections Course
1. https://www.youtube.com/watch?v=hKhlkx_6HeI&list=PLUDwpEzHYYLu9-xrx5ykNH8wmN1C1qClk&ab_channel=SDET-QA